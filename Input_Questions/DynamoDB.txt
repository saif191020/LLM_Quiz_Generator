Question:You need to design a DynamoDB table to store user profile data, including username, email, and user ID. How would you structure the primary key?
Answer: Use userID as the partition key.
The userID is unique for each user and ensures that each item can be retrieved directly and efficiently.
Question:You have a table with millions of items. You need to retrieve all items where the status attribute is 'active'. What DynamoDB operation would you use?
Answer: Use the Scan operation.
A Scan operation examines every item in the table to find all items with the specified attribute value, but it’s less efficient than a query.
Question:You need to ensure that the email attribute is unique across all items in the user table. How would you enforce this uniqueness in DynamoDB?
Answer: Use a global secondary index (GSI) with email as the partition key.
A GSI with email as the partition key ensures that emails are unique across the table.
Question:You need to store time-series data for sensor readings with each reading having a timestamp. How would you structure the table’s primary key?
Answer: Use sensorID as the partition key and timestamp as the sort key.
This allows you to efficiently retrieve all readings for a specific sensor ordered by time.
Question: You want to back up your DynamoDB table daily. Which feature would you use?
Answer: Use DynamoDB’s On-Demand Backup and Restore.
This feature allows you to create full backups of your tables for data recovery.
Question: Your application requires read and write operations to be processed within a few milliseconds. How would you configure DynamoDB for this requirement?
Answer: Use provisioned throughput with sufficient read and write capacity units.
Ensuring enough capacity units helps maintain low latency for read and write operations.
Question: You need to retrieve items from a DynamoDB table where the partition key is known but the sort key is only partially known. Which query option would you use?
Answer: Use the begins_with condition in a query.
This allows you to query items where the sort key starts with a specific prefix.
Question:You need to ensure that your DynamoDB table is available in multiple regions for disaster recovery. Which feature would you use?
Answer: Use DynamoDB Global Tables.
Global Tables automatically replicate your data across multiple regions.
Question:You need to temporarily increase the read capacity of your table to handle a traffic spike. What would you do?
Answer: Use the UpdateTable operation to increase the provisioned read capacity.
This allows you to handle increased read traffic by temporarily boosting the read capacity.
Question:Your application requires strongly consistent reads. How would you configure your DynamoDB read operations?
Answer: Set the ConsistentRead parameter to true.
This ensures that the read operation returns the most up-to-date data.
Question:You need to perform a bulk write operation to load initial data into your DynamoDB table. Which method would you use?
Answer: Use the BatchWriteItem API.
BatchWriteItem allows you to perform multiple put and delete operations in a single request.
Question:You have a table where items are frequently updated. You need to capture and process these changes in real-time. What feature would you use?
Answer: Enable DynamoDB Streams.
DynamoDB Streams capture data modification events in a table and allow you to process these changes.
Question:You want to ensure that a write operation only occurs if the item does not already exist. How would you implement this?
Answer: Use a conditional expression with the PutItem operation.
The conditional expression can check for the absence of the item before allowing the write.
Question:Scenario: You need to paginate results from a Query operation. How would you achieve this?
Answer: Use the LastEvaluatedKey returned by the query and pass it as ExclusiveStartKey in subsequent queries.
This allows you to retrieve the next set of results in a paginated fashion.
Question:Your table has a large amount of read-heavy traffic. To improve performance, you decide to use a caching solution. Which AWS service would you integrate with DynamoDB?
Answer: Use Amazon DynamoDB Accelerator (DAX).
DAX is a fully managed caching service that improves read performance for DynamoDB.
Question:You need to update multiple items in a single transaction. Which feature would you use?
Answer: Use TransactWriteItems.
This allows you to perform multiple write operations in a single atomic transaction.
Question:You need to calculate the total number of items in a DynamoDB table. How would you do this?
Answer: Use the Scan operation with a Count attribute.
The Scan operation can return the total count of items without retrieving the actual items.
Question:You need to restrict access to certain items in your DynamoDB table based on the user’s role. How would you implement this?
Answer: Use IAM policies with condition expressions.
IAM policies can enforce fine-grained access control based on item attributes.
Question:You need to retrieve only specific attributes of an item to minimize data transfer. How would you configure your read request?
Answer: Use the ProjectionExpression parameter in the GetItem or Query request.
ProjectionExpression allows you to specify which attributes to retrieve.
Question:You need to archive items that haven’t been accessed in the last year. How would you identify these items?
Answer: Use a Scan operation with a filter expression based on a timestamp attribute.
This allows you to find items that haven’t been accessed within the specified timeframe.
Question:You need to delete multiple items from a DynamoDB table based on a condition. How would you do this?
Answer: Use BatchWriteItem with conditional expressions.
BatchWriteItem allows you to delete multiple items, and conditional expressions ensure the deletions meet specific criteria.
Question:Your DynamoDB table needs to support complex queries involving multiple attributes. Which index would you use?
Answer: Use a global secondary index (GSI).
GSIs allow you to create indexes on attributes other than the primary key, supporting more complex queries.
Question: You want to automate the scaling of read and write capacity for your DynamoDB table based on traffic patterns. Which feature would you use?
Answer: Enable DynamoDB Auto Scaling.
Auto Scaling adjusts the provisioned capacity based on the specified scaling policies and traffic patterns.
Question:You need to retrieve items from two different DynamoDB tables in a single request. How would you achieve this?
Answer: Use the BatchGetItem API.
BatchGetItem allows you to retrieve items from multiple tables in a single request.
Question:Your application needs to store large binary objects (e.g., images) alongside other item attributes. How would you handle this in DynamoDB?
Answer: Store the binary objects in Amazon S3 and save the S3 object URL in DynamoDB.
Question:A DynamoDB table stores items with an average size of 1 KB. You want to read 100 strongly consistent items per second. How many RCUs are required?
Answer: 100 RCUs (1 RCU per strongly consistent read of an item up to 4 KB).
Question:You have a DynamoDB table where each item is 8 KB in size. You need to perform 50 strongly consistent reads per second. How many RCUs do you need?
Answer: 100 RCUs (Each 8 KB item requires 2 RCUs for strongly consistent reads, so 50 reads * 2 RCUs = 100 RCUs).
Question:A DynamoDB table stores items with an average size of 2 KB. You plan to perform 200 eventually consistent reads per second. How many RCUs are required?
Answer: 100 RCUs (Each 2 KB item requires 0.5 RCUs for eventually consistent reads, so 200 reads * 0.5 RCUs = 100 RCUs).
Question:A table is configured with 200 RCUs. How many strongly consistent reads per second can it handle if each item is 4 KB?
Answer: 200 reads per second (1 RCU per 4 KB for strongly consistent reads).
Question:You have a table with 500 RCUs configured. Each item is 1 KB in size. How many eventually consistent reads per second can the table handle?
Answer: 1000 reads per second (0.5 RCU per 1 KB for eventually consistent reads, so 500 RCUs * 2 = 1000 reads).
Question: A DynamoDB table has an average item size of 12 KB. How many RCUs are required to perform 10 strongly consistent reads per second?
Answer: 30 RCUs (Each 12 KB item requires 3 RCUs for strongly consistent reads, so 10 reads * 3 RCUs = 30 RCUs).
Question:You need to write 100 items per second to a DynamoDB table, with each item being 3 KB in size. How many WCUs are required?
Answer: 100 WCUs (Each 3 KB item requires 1 WCU for writes, so 100 writes * 1 WCU = 100 WCUs).
Question:A DynamoDB table stores items with an average size of 16 KB. How many RCUs are required to perform 50 eventually consistent reads per second?
Answer: 200 RCUs (Each 16 KB item requires 4 RCUs for eventually consistent reads, so 50 reads * 4 RCUs = 200 RCUs).
Question:You need to write 25 items per second to a DynamoDB table, with each item being 6 KB in size. How many WCUs are required?
Answer: 50 WCUs (Each 6 KB item requires 2 WCUs for writes, so 25 writes * 2 WCUs = 50 WCUs).
Question:What is the maximum size (in KB) of an item in DynamoDB?
Answer: 400 , Each item in DynamoDB can be up to 400 KB in size.
Question: What is the maximum number of global secondary indexes you can create per table?
Answer: 20 , You can create up to 20 global secondary indexes per table.
Question:What is the maximum number of local secondary indexes you can create per table?
Answer: 5 , Each DynamoDB table can have up to 5 local secondary indexes.
Question:What is the maximum number of attributes an item can have?
Answer: 65535 , Each item can have up to 65535 attributes.
Question:What is the maximum length (in characters) for a partition key or sort key?
Answer: 2048 , The maximum length for a partition key or sort key is 2048 bytes when using UTF-8 encoding.
Question:What is the maximum length (in characters) for a string attribute?
Answer: 400 , The maximum length for a string attribute is 400 KB, which equates to 400,000 characters if using 1-byte encoding.
Question:How many strongly consistent read capacity units are required to read an item up to 4 KB in size?
Answer: 1 , 1 strongly consistent read capacity unit is required to read an item up to 4 KB in size.
Question:How many eventually consistent read capacity units are required to read an item up to 4 KB in size?
Answer: 0.5 , 1 eventually consistent read capacity unit can read two items up to 4 KB in size, effectively halving the requirement to 0.5.
Question:What is the maximum provisioned throughput (in write capacity units) for a single table in DynamoDB?
Answer: 40000 , The maximum provisioned throughput for a single table is 40,000 write capacity units.
Question:What is the maximum provisioned throughput (in read capacity units) for a single table in DynamoDB?
Answer: 40000 , The maximum provisioned throughput for a single table is 40,000 read capacity units.
Question:What is the maximum number of tables with on-demand mode you can create per AWS account?
Answer: 256 , You can create up to 256 tables with on-demand mode per AWS account.
Question:What is the default limit for the number of DynamoDB tables you can create per AWS account?
Answer: 256 , The default limit is 256 tables per AWS account, but this can be increased by request.
Question:What is the default maximum number of DynamoDB tables you can create in a region?
Answer: 256 , The default maximum is 256 tables per region, subject to account limits.
Question:What is the maximum item size (in KB) for a DynamoDB transaction write request?
Answer: 400 , The maximum size for an item in a transaction write request is 400 KB.
Question:What is the maximum number of items you can include in a DynamoDB batch write request?
Answer: 25 , You can include up to 25 items in a batch write request.
Question:What is the maximum number of items you can retrieve in a single DynamoDB query operation?
Answer: 1000 , You can retrieve up to 1000 items in a single query operation.
Question:What is the maximum number of attributes you can project into a global secondary index?
Answer: 20 , You can project up to 20 attributes into a global secondary index.
Question:What is the maximum number of transaction operations (both read and write) you can include in a single DynamoDB transaction?
Answer: 25 , You can include up to 25 operations in a single transaction.
Question:How many read capacity units are consumed by a transactional read request for an item up to 4 KB in size?
Answer: 2 , A transactional read request consumes 2 read capacity units.
Question:How many write capacity units are consumed by a transactional write request for an item up to 1 KB in size?
Answer: 2 , A transactional write request consumes 2 write capacity units.
Question:What is the maximum number of distinct data types supported by DynamoDB?
Answer: 10 , DynamoDB supports 10 distinct data types (Number, String, Binary, Boolean, Null, List, Map, String Set, Number Set, Binary Set).
Question:What is the maximum size (in MB) of a DynamoDB stream record?
Answer: 24 , The maximum size of a stream record is 24 MB.
Question:What is the maximum number of shards you can have in a DynamoDB stream?
Answer: 1000 , The maximum number of shards in a DynamoDB stream is 1000.
Question:What is the maximum number of Lambda functions you can trigger from a DynamoDB stream?
Answer: 5 , You can configure up to 5 Lambda functions to process records from a DynamoDB stream.
Question:What is the maximum number of expressions you can use in a single DynamoDB query filter?
Answer: 20 , You can use up to 20 expressions in a query filter.
Question:What is the maximum number of partitions for a single DynamoDB table?
Answer: 10 , The initial maximum number of partitions is 10, but this can increase as the table grows.
Question:What is the maximum number of conditions you can use in a DynamoDB conditional write request?
Answer: 1 , Each conditional write request can include only one condition.
Question:What is the maximum length (in characters) for a DynamoDB table name?
Answer: 255 , The maximum length for a table name is 255 characters.
Question:What is the maximum length (in bytes) for a DynamoDB attribute name?
Answer: 255 , The maximum length for an attribute name is 255 bytes.